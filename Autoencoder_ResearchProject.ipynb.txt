{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN+d8bWm7eCwK5/f7eBLnck",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/emi-tyo/advanced-data-analytics/blob/main/Autoencoder_ResearchProject.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 1：Simulate Data (normal + anomaly)**"
      ],
      "metadata": {
        "id": "tDs8nf7JrfL_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "esF-BIzBq3ly",
        "outputId": "1e8d57d8-3013-4ddd-de1e-d4d004e80af8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Simulated telemetry data created successfully!\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "# Create output folder\n",
        "os.makedirs(\"data\", exist_ok=True)\n",
        "\n",
        "# Generate normal flight data (1000 samples)\n",
        "normal_data = pd.DataFrame({\n",
        "    'latitude': np.random.uniform(35.0, 36.0, 1000),\n",
        "    'longitude': np.random.uniform(139.0, 140.0, 1000),\n",
        "    'altitude': np.random.normal(100, 10, 1000),\n",
        "    'speed': np.random.normal(10, 1, 1000),\n",
        "    'battery': np.random.normal(90, 5, 1000),\n",
        "    'anomaly_type': ['normal'] * 1000,\n",
        "    'label': [0] * 1000\n",
        "})\n",
        "\n",
        "# Generate speed anomaly\n",
        "anomaly_speed = pd.DataFrame({\n",
        "    'latitude': np.random.uniform(35.0, 36.0, 10),\n",
        "    'longitude': np.random.uniform(139.0, 140.0, 10),\n",
        "    'altitude': np.random.normal(100, 10, 10),\n",
        "    'speed': np.random.normal(60, 5, 10),\n",
        "    'battery': np.random.normal(90, 5, 10),\n",
        "    'anomaly_type': ['speed_abnormal'] * 10,\n",
        "    'label': [1] * 10\n",
        "})\n",
        "\n",
        "# Generate battery drop anomaly\n",
        "anomaly_battery = pd.DataFrame({\n",
        "    'latitude': np.random.uniform(35.0, 36.0, 10),\n",
        "    'longitude': np.random.uniform(139.0, 140.0, 10),\n",
        "    'altitude': np.random.normal(100, 10, 10),\n",
        "    'speed': np.random.normal(10, 1, 10),\n",
        "    'battery': np.random.normal(5, 2, 10),\n",
        "    'anomaly_type': ['battery_drop'] * 10,\n",
        "    'label': [1] * 10\n",
        "})\n",
        "\n",
        "# Generate altitude anomaly\n",
        "anomaly_altitude = pd.DataFrame({\n",
        "    'latitude': np.random.uniform(35.0, 36.0, 10),\n",
        "    'longitude': np.random.uniform(139.0, 140.0, 10),\n",
        "    'altitude': np.random.normal(10000, 100, 10),\n",
        "    'speed': np.random.normal(10, 1, 10),\n",
        "    'battery': np.random.normal(90, 5, 10),\n",
        "    'anomaly_type': ['altitude_abnormal'] * 10,\n",
        "    'label': [1] * 10\n",
        "})\n",
        "\n",
        "# Combine all data\n",
        "full_data = pd.concat([normal_data, anomaly_speed, anomaly_battery, anomaly_altitude], ignore_index=True)\n",
        "full_data = full_data.sample(frac=1).reset_index(drop=True)\n",
        "\n",
        "# Save to CSV\n",
        "full_data.to_csv(\"data/uav_telemetry_data.csv\", index=False)\n",
        "\n",
        "print(\"Simulated telemetry data created successfully!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 2：Data Preprocessing (Normalization)**\n"
      ],
      "metadata": {
        "id": "TtSeeBJ8rl1U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Load the telemetry data\n",
        "data = pd.read_csv(\"data/uav_telemetry_data.csv\")\n",
        "\n",
        "# Select features (latitude, longitude, altitude, speed, battery)\n",
        "X = data[['latitude', 'longitude', 'altitude', 'speed', 'battery']]\n",
        "y = data['label']  # 0 = normal, 1 = anomaly\n",
        "\n",
        "# Normalize features using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Split the data\n",
        "# Use only normal data for training\n",
        "X_train = X_scaled[data['label'] == 0]\n",
        "\n",
        "# Use all data (normal + anomaly) for testing\n",
        "X_test = X_scaled\n",
        "y_test = y.values\n",
        "\n",
        "print(\"Preprocessing completed!\")\n",
        "print(\"▶Training data shape:\", X_train.shape)\n",
        "print(\"▶Test data shape:\", X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KPUUNTJHrqnS",
        "outputId": "d1a578d8-7182-440a-e87f-9d89a3e35488"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preprocessing completed!\n",
            "▶Training data shape: (1000, 5)\n",
            "▶Test data shape: (1030, 5)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 3：Autoencoder Model Training**"
      ],
      "metadata": {
        "id": "Cyn52U20sJ-z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Input, Dense\n",
        "\n",
        "# Define input dimension\n",
        "input_dim = X_train.shape[1]\n",
        "\n",
        "# Build the Autoencoder\n",
        "input_layer = Input(shape=(input_dim,))\n",
        "encoded = Dense(16, activation='relu')(input_layer)\n",
        "encoded = Dense(4, activation='relu')(encoded)\n",
        "decoded = Dense(16, activation='relu')(encoded)\n",
        "output_layer = Dense(input_dim, activation='sigmoid')(decoded)\n",
        "\n",
        "autoencoder = Model(inputs=input_layer, outputs=output_layer)\n",
        "autoencoder.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "# Train the Autoencoder\n",
        "history = autoencoder.fit(\n",
        "    X_train, X_train,\n",
        "    epochs=50,\n",
        "    batch_size=32,\n",
        "    shuffle=True,\n",
        "    validation_split=0.1,\n",
        "    verbose=1\n",
        ")\n",
        "\n",
        "print(\"Autoencoder training completed!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BCdgQGZ3sX1_",
        "outputId": "85dff593-e574-473b-843d-92364567ec2d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step - loss: 0.1354 - val_loss: 0.1096\n",
            "Epoch 2/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.1032 - val_loss: 0.0777\n",
            "Epoch 3/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0724 - val_loss: 0.0516\n",
            "Epoch 4/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0502 - val_loss: 0.0389\n",
            "Epoch 5/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0385 - val_loss: 0.0336\n",
            "Epoch 6/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0346 - val_loss: 0.0303\n",
            "Epoch 7/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0312 - val_loss: 0.0268\n",
            "Epoch 8/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0271 - val_loss: 0.0234\n",
            "Epoch 9/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0239 - val_loss: 0.0201\n",
            "Epoch 10/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0209 - val_loss: 0.0178\n",
            "Epoch 11/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0182 - val_loss: 0.0164\n",
            "Epoch 12/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0174 - val_loss: 0.0154\n",
            "Epoch 13/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0157 - val_loss: 0.0147\n",
            "Epoch 14/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0156 - val_loss: 0.0139\n",
            "Epoch 15/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0139 - val_loss: 0.0131\n",
            "Epoch 16/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0142 - val_loss: 0.0119\n",
            "Epoch 17/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0129 - val_loss: 0.0105\n",
            "Epoch 18/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0108 - val_loss: 0.0087\n",
            "Epoch 19/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0090 - val_loss: 0.0070\n",
            "Epoch 20/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0068 - val_loss: 0.0049\n",
            "Epoch 21/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0046 - val_loss: 0.0033\n",
            "Epoch 22/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0031 - val_loss: 0.0022\n",
            "Epoch 23/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0020 - val_loss: 0.0016\n",
            "Epoch 24/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0016 - val_loss: 0.0013\n",
            "Epoch 25/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0012 - val_loss: 0.0012\n",
            "Epoch 26/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0011 - val_loss: 0.0011\n",
            "Epoch 27/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0010 - val_loss: 0.0011\n",
            "Epoch 28/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 9.6607e-04 - val_loss: 0.0010\n",
            "Epoch 29/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.9154e-04 - val_loss: 9.9019e-04\n",
            "Epoch 30/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.3611e-04 - val_loss: 9.8008e-04\n",
            "Epoch 31/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.9293e-04 - val_loss: 9.6713e-04\n",
            "Epoch 32/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.1274e-04 - val_loss: 9.6180e-04\n",
            "Epoch 33/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.1897e-04 - val_loss: 9.6697e-04\n",
            "Epoch 34/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.1183e-04 - val_loss: 9.3651e-04\n",
            "Epoch 35/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.4296e-04 - val_loss: 9.2597e-04\n",
            "Epoch 36/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.4524e-04 - val_loss: 9.1777e-04\n",
            "Epoch 37/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.3644e-04 - val_loss: 9.1013e-04\n",
            "Epoch 38/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.7692e-04 - val_loss: 9.1613e-04\n",
            "Epoch 39/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8.8387e-04 - val_loss: 8.9119e-04\n",
            "Epoch 40/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8.4436e-04 - val_loss: 8.9554e-04\n",
            "Epoch 41/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.4827e-04 - val_loss: 8.9154e-04\n",
            "Epoch 42/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8.4183e-04 - val_loss: 8.8891e-04\n",
            "Epoch 43/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.9037e-04 - val_loss: 8.7343e-04\n",
            "Epoch 44/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.2934e-04 - val_loss: 8.9100e-04\n",
            "Epoch 45/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8.6381e-04 - val_loss: 8.6600e-04\n",
            "Epoch 46/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.2035e-04 - val_loss: 8.6488e-04\n",
            "Epoch 47/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.2360e-04 - val_loss: 8.6772e-04\n",
            "Epoch 48/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.3238e-04 - val_loss: 8.4954e-04\n",
            "Epoch 49/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.0955e-04 - val_loss: 8.5655e-04\n",
            "Epoch 50/50\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 8.4949e-04 - val_loss: 8.3927e-04\n",
            "Autoencoder training completed!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 4: Anomaly Detection (Reconstruction Error & Threshold)**"
      ],
      "metadata": {
        "id": "2SUv3iCUsmSH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import numpy as np\n",
        "\n",
        "# Predict reconstruction for test data\n",
        "reconstructions = autoencoder.predict(X_test)\n",
        "\n",
        "# Calculate reconstruction errors (MSE)\n",
        "mse = np.mean(np.square(X_test - reconstructions), axis=1)\n",
        "\n",
        "# Set threshold at 95th percentile\n",
        "threshold = np.percentile(mse, 95)\n",
        "print(\"📏 Threshold:\", threshold)\n",
        "\n",
        "# Predict anomalies\n",
        "y_pred = (mse > threshold).astype(int)\n",
        "\n",
        "# Evaluate\n",
        "print(\"Anomaly detection results:\")\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "print(classification_report(y_test, y_pred, target_names=[\"Normal\", \"Anomaly\"]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_gjVic4-sx4E",
        "outputId": "7ebfd61b-b905-468e-bf3d-93fd7ffe4c28"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m33/33\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
            "📏 Threshold: 0.0027989983093873396\n",
            "Anomaly detection results:\n",
            "[[978  22]\n",
            " [  0  30]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Normal       1.00      0.98      0.99      1000\n",
            "     Anomaly       0.58      1.00      0.73        30\n",
            "\n",
            "    accuracy                           0.98      1030\n",
            "   macro avg       0.79      0.99      0.86      1030\n",
            "weighted avg       0.99      0.98      0.98      1030\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 5: Visualization of Reconstruction Error**"
      ],
      "metadata": {
        "id": "mM7bKdrys3Ac"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load anomaly types again\n",
        "y_type = data['anomaly_type']\n",
        "\n",
        "# Plot by anomaly type\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "for anomaly_type in y_type.unique():\n",
        "    idx = y_type == anomaly_type\n",
        "    plt.scatter(\n",
        "        np.where(idx)[0], mse[idx],\n",
        "        label=anomaly_type, alpha=0.7\n",
        "    )\n",
        "\n",
        "plt.axhline(y=threshold, color='red', linestyle='--', label=\"Threshold\")\n",
        "plt.title(\"Reconstruction Error by Anomaly Type\")\n",
        "plt.xlabel(\"Sample Index\")\n",
        "plt.ylabel(\"MSE (Reconstruction Error)\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "yWBWlTBWs8RH",
        "outputId": "720dbd0e-531f-4c2e-88ee-10b156188e7e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 6: Anomaly Pattern List Creation**"
      ],
      "metadata": {
        "id": "SngGTtwvQaSa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Map anomaly descriptions\n",
        "anomaly_descriptions = {\n",
        "    'normal': 'Normal flight pattern',\n",
        "    'speed_abnormal': 'Abnormally high speed (>50 m/s)',\n",
        "    'battery_drop': 'Critically low battery (<10%)',\n",
        "    'altitude_abnormal': 'Extremely high altitude (>10,000 m)'\n",
        "}\n",
        "\n",
        "# Define function to classify detectability\n",
        "def detection_ease(mse_value):\n",
        "    if mse_value > 0.15:\n",
        "        return \"Easy to detect\"\n",
        "    elif mse_value > 0.08:\n",
        "        return \"Moderate\"\n",
        "    else:\n",
        "        return \"Hard to detect\"\n",
        "\n",
        "# Create anomaly pattern list\n",
        "pattern_list = []\n",
        "\n",
        "for idx, row in mse_summary.iterrows():\n",
        "    anomaly_type = row['anomaly_type']\n",
        "    avg_mse = row['mse']\n",
        "\n",
        "    pattern_list.append({\n",
        "        'Anomaly Type': anomaly_type,\n",
        "        'Main Anomalous Feature': anomaly_descriptions.get(anomaly_type, 'Unknown'),\n",
        "        'Average MSE': round(avg_mse, 4),\n",
        "        'Detectability': detection_ease(avg_mse)\n",
        "    })\n",
        "\n",
        "# Convert to DataFrame\n",
        "pattern_df = pd.DataFrame(pattern_list)\n",
        "\n",
        "# Output\n",
        "print(\"Anomaly Pattern List:\")\n",
        "print(pattern_df.to_markdown(index=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u_zYKLUQQgBx",
        "outputId": "7300a259-12a6-4671-af0d-4c29ef541dd7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Anomaly Pattern List:\n",
            "| Anomaly Type      | Main Anomalous Feature              |   Average MSE | Detectability   |\n",
            "|:------------------|:------------------------------------|--------------:|:----------------|\n",
            "| altitude_abnormal | Extremely high altitude (>10,000 m) |        0.248  | Easy to detect  |\n",
            "| battery_drop      | Critically low battery (<10%)       |        0.1122 | Moderate        |\n",
            "| normal            | Normal flight pattern               |        0.0008 | Hard to detect  |\n",
            "| speed_abnormal    | Abnormally high speed (>50 m/s)     |        0.1762 | Easy to detect  |\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 7: 異常パターンリスト表の作成（テンプレ）**"
      ],
      "metadata": {
        "id": "e0HHbrKeQ0jh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Map anomaly descriptions\n",
        "anomaly_descriptions = {\n",
        "    'normal': 'Normal flight pattern',\n",
        "    'speed_abnormal': 'Abnormally high speed (>50 m/s)',\n",
        "    'battery_drop': 'Critically low battery (<10%)',\n",
        "    'altitude_abnormal': 'Extremely high altitude (>10,000 m)'\n",
        "}\n",
        "\n",
        "# Define function to classify detectability\n",
        "def detection_ease(mse_value):\n",
        "    if mse_value > 0.15:\n",
        "        return \"Easy to detect\"\n",
        "    elif mse_value > 0.08:\n",
        "        return \"Moderate\"\n",
        "    else:\n",
        "        return \"Hard to detect\"\n",
        "\n",
        "# Create anomaly pattern list\n",
        "pattern_list = []\n",
        "\n",
        "for idx, row in mse_summary.iterrows():\n",
        "    anomaly_type = row['anomaly_type']\n",
        "    avg_mse = row['mse']\n",
        "\n",
        "    pattern_list.append({\n",
        "        'Anomaly Type': anomaly_type,\n",
        "        'Main Anomalous Feature': anomaly_descriptions.get(anomaly_type, 'Unknown'),\n",
        "        'Average MSE': round(avg_mse, 4),\n",
        "        'Detectability': detection_ease(avg_mse)\n",
        "    })\n",
        "\n",
        "# Convert to DataFrame\n",
        "pattern_df = pd.DataFrame(pattern_list)\n",
        "\n",
        "# Output\n",
        "print(\"Anomaly Pattern List:\")\n",
        "print(pattern_df.to_markdown(index=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BRW1wwFfQ-Jh",
        "outputId": "dce4a061-cdd8-4ef6-fafe-ce9e43c0481d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Anomaly Pattern List:\n",
            "| Anomaly Type      | Main Anomalous Feature              |   Average MSE | Detectability   |\n",
            "|:------------------|:------------------------------------|--------------:|:----------------|\n",
            "| altitude_abnormal | Extremely high altitude (>10,000 m) |        0.248  | Easy to detect  |\n",
            "| battery_drop      | Critically low battery (<10%)       |        0.1122 | Moderate        |\n",
            "| normal            | Normal flight pattern               |        0.0008 | Hard to detect  |\n",
            "| speed_abnormal    | Abnormally high speed (>50 m/s)     |        0.1762 | Easy to detect  |\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Step 8: 異常パターンリストをMarkdown形式で出力する**"
      ],
      "metadata": {
        "id": "tIE9aL74R8oX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the anomaly pattern list to Markdown format\n",
        "markdown_table = pattern_df.to_markdown(index=False)\n",
        "\n",
        "# Print the Markdown table\n",
        "print(\"Markdown-formatted Anomaly Pattern List\")\n",
        "print(markdown_table)"
      ],
      "metadata": {
        "id": "DmrZgrgsSGc8",
        "outputId": "855cee30-d356-4942-8ed0-5d49de52f41f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Markdown-formatted Anomaly Pattern List\n",
            "| Anomaly Type      | Main Anomalous Feature              |   Average MSE | Detectability   |\n",
            "|:------------------|:------------------------------------|--------------:|:----------------|\n",
            "| altitude_abnormal | Extremely high altitude (>10,000 m) |        0.248  | Easy to detect  |\n",
            "| battery_drop      | Critically low battery (<10%)       |        0.1122 | Moderate        |\n",
            "| normal            | Normal flight pattern               |        0.0008 | Hard to detect  |\n",
            "| speed_abnormal    | Abnormally high speed (>50 m/s)     |        0.1762 | Easy to detect  |\n"
          ]
        }
      ]
    }
  ]
}